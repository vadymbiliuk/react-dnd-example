{"version":3,"sources":["components/Container/Container.utils.ts","theme/colors.ts","components/Column/Column.styles.ts","theme/theme.ts","components/Column/Column.tsx","components/Container/Container.styles.ts","components/Card/Card.styles.ts","components/Card/Card.tsx","components/Container/Container.tsx","theme/globalStyles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Status","light0","S","Column","styled","div","Title","h1","ItemType","Symbol","name","children","useDrop","accept","drop","collect","monitor","isOver","canDrop","currentColumnName","fromTodoToDone","todo","done","fromDoneToTodo","ref","Container","Card","props","opacity","title","setItems","index","handleMoveCard","useRef","changeItemColumn","currentItem","status","prevState","map","item","hover","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","Number","y","useDrag","type","end","dropResult","getDropResult","isDragging","drag","useState","data","tasks","setTasks","filterByStatus","useCallback","x","dragItem","coppiedStateArray","prevItem","splice","getColumnItems","filter","task","GlobalTheme","styles","css","App","DndProvider","backend","HTML5Backend","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ddc3c42.chunk.js","sourcesContent":["import data from \"../../tasks.json\";\n\n// | Enums\nexport enum Status {\n  todo = \"todo\",\n  done = \"done\",\n}\n\n// | Helper for taking task element type\ntype ArrayElement<\n  ArrayType extends readonly unknown[]\n> = ArrayType extends readonly (infer ElementType)[] ? ElementType : never;\n\n// | Reusable types\n\nexport type Task = ArrayElement<typeof data.tasks>;\n\n// | ItemType for react-dnd library usage\nexport const ItemType = Symbol(\"Card\");\n","// Dark palette\nexport const dark0 = \"rgb(28, 28, 30)\";\nexport const dark1 = \"rgb(44, 44, 46)\";\nexport const dark2 = \"rgb(58, 58, 60)\";\nexport const dark3 = \"rgb(72, 72, 74)\";\n\n// Fonts\nexport const light0 = \"rgb(242, 242, 247)\";\n","import styled from \"@emotion/styled\";\nimport { borderRadius, dark1, light0 } from \"../../theme\";\n\nexport const S = {\n  Column: styled.div`\n    min-width: 275px;\n    background-color: ${dark1};\n    border-radius: ${borderRadius};\n    padding: 20px;\n    margin: 20px;\n    box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n      0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  `,\n\n  Title: styled.h1`\n    text-align: center;\n    font-size: 25px;\n    color: ${light0};\n  `,\n};\n","export const borderRadius = \"4px\";\n","import { FC } from \"react\";\nimport { S } from \"./Column.styles\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemType, Status } from \"../Container/Container.utils\";\nimport { CardProps } from \"../Card\";\n\nexport type ColumnProps = {\n  name: Status;\n};\n\nconst Column: FC<ColumnProps> = ({ name, children }) => {\n  const [_, drop] = useDrop(\n    () => ({\n      accept: ItemType,\n      drop: () => ({ name }),\n      collect: (monitor: any) => ({\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop(),\n      }),\n      canDrop: ({ currentColumnName }: CardProps) => {\n        const fromTodoToDone =\n          currentColumnName === Status.todo && name === Status.done;\n        const fromDoneToTodo =\n          currentColumnName === Status.done && name === Status.todo;\n        const canDrop =\n          currentColumnName === name || fromTodoToDone || fromDoneToTodo;\n\n        return canDrop;\n      },\n    }),\n    []\n  );\n\n  return (\n    <S.Column ref={drop}>\n      <S.Title>{name}</S.Title>\n      {children}\n    </S.Column>\n  );\n};\nexport { Column };\n","import styled from \"@emotion/styled\";\n\nexport const S = {\n  Container: styled.div`\n    display: flex;\n  `,\n};\n","import styled from \"@emotion/styled\";\nimport { borderRadius, dark2, light0 } from \"../../theme\";\n\nexport const S = {\n  Card: styled.div<{ opacity?: number }>`\n    background-color: ${dark2};\n    opacity: ${(props) => props.opacity};\n    color: ${light0};\n    border-radius: ${borderRadius};\n    padding: 10px;\n    margin: 10px 0;\n    text-align: center;\n    line-height: 1;\n    min-width: 275px;\n    box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n      0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  `,\n};\n","import { Dispatch, FC, SetStateAction, useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemType, Status, Task } from \"../Container/Container.utils\";\nimport { S } from \"./Card.styles\";\n\nexport type DragObject = {\n  title: string;\n  currentColumnName: Status;\n  index: number;\n  type: typeof ItemType;\n};\nexport type DropResult = {\n  name: string;\n  dropEffect: string;\n};\n\nexport type CardProps = {\n  title: Task[\"title\"];\n  currentColumnName: Status;\n  setItems: Dispatch<SetStateAction<Task[]>>;\n  index: number;\n  handleMoveCard: (dragIndex: number, hoverIndex: number) => void;\n};\n\nconst Card: FC<CardProps> = ({\n  title,\n  currentColumnName,\n  setItems,\n  index,\n  handleMoveCard,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const changeItemColumn = (currentItem: { title: string }, status: Status) => {\n    setItems((prevState) =>\n      prevState.map((item) => ({\n        ...item,\n        status: item.title === currentItem.title ? status : item.status,\n      }))\n    );\n  };\n\n  const [_, drop] = useDrop({\n    accept: ItemType,\n    hover: (item: { index: number }, monitor) => {\n      if (!ref.current) return;\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) return;\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = Number(clientOffset?.y) - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      handleMoveCard(dragIndex, hoverIndex);\n\n      item.index = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag<\n    DragObject,\n    DropResult,\n    { isDragging: boolean }\n  >({\n    type: ItemType,\n    item: { index, title, currentColumnName, type: ItemType },\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult<DropResult>();\n\n      if (dropResult) {\n        const { name } = dropResult;\n\n        switch (name) {\n          case Status.todo:\n            changeItemColumn(item, Status.todo);\n            break;\n          case Status.done:\n            changeItemColumn(item, Status.done);\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const opacity = isDragging ? 0.4 : 1;\n\n  drag(drop(ref));\n\n  return (\n    <S.Card ref={ref} opacity={opacity}>\n      {title}\n    </S.Card>\n  );\n};\n\nexport { Card };\n","import { FC, useCallback, useState } from \"react\";\nimport { Column } from \"../Column\";\nimport { S } from \"./Container.styles\";\nimport data from \"../../tasks.json\";\nimport { Status, Task } from \"./Container.utils\";\nimport { Card } from \"../Card\";\n\nconst Container: FC = () => {\n  const [tasks, setTasks] = useState(data.tasks);\n\n  const filterByStatus = useCallback(\n    (status: string) => (x: Task) => x.status === status,\n    []\n  );\n\n  const handleMoveCard = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const dragItem = tasks[dragIndex];\n\n      if (dragItem) {\n        setTasks((prevState) => {\n          const coppiedStateArray = [...prevState];\n\n          // remove item by \"hoverIndex\" and put \"dragItem\" instead\n          const prevItem = coppiedStateArray.splice(hoverIndex, 1, dragItem);\n\n          // remove item by \"dragIndex\" and put \"prevItem\" instead\n          coppiedStateArray.splice(dragIndex, 1, prevItem[0]);\n\n          return coppiedStateArray;\n        });\n      }\n    },\n    [tasks]\n  );\n\n  const getColumnItems = useCallback(\n    (status: Status) =>\n      tasks\n        .filter(filterByStatus(status))\n        .map((task, index) => (\n          <Card\n            key={task.title}\n            title={task.title}\n            currentColumnName={status}\n            setItems={setTasks}\n            index={index}\n            handleMoveCard={handleMoveCard}\n          />\n        )),\n    [tasks, filterByStatus, handleMoveCard]\n  );\n\n  return (\n    <S.Container>\n      <Column name={Status.todo}>{getColumnItems(Status.todo)}</Column>\n      <Column name={Status.done}>{getColumnItems(Status.done)}</Column>\n    </S.Container>\n  );\n};\n\nexport { Container };\n","import { Global, css } from \"@emotion/react\";\nimport { FC } from \"react\";\nimport { dark0 } from \"./colors\";\n\nexport const GlobalTheme: FC = () => (\n  <Global\n    styles={css`\n      body {\n        background-color: ${dark0};\n      }\n    `}\n  />\n);\n","import { FC } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { Container } from \"./components/Container\";\nimport { GlobalTheme } from \"./theme/globalStyles\";\n\nconst App: FC = () => (\n  <DndProvider backend={HTML5Backend}>\n    <GlobalTheme />\n    <Container />\n  </DndProvider>\n);\n\nexport { App };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}